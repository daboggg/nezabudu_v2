import time
from datetime import datetime, timedelta

from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, Message
from aiogram.utils.formatting import as_list, Bold, as_key_value, Italic
from apscheduler.job import Job
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from bot.keyboards.main_ketboards import cancel_or_edit_kb
from bot.state_groups import RescheduleReminds
from bot.utils.converter import conv_voice
from bot.utils.from_datetime_to_str import datetime_to_str
from bot.utils.save_data import save_data
from parser_v2.parse import parse

delay_remind_handlers = Router()


# –æ—Ç–ª–æ–∂–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
@delay_remind_handlers.callback_query(F.data.startswith("delay_remind"))
async def delay_remind(callback: CallbackQuery, apscheduler: AsyncIOScheduler):
    tmp = callback.data.split(":")
    job_id = tmp[1]
    delay_time = int(tmp[2])
    job: Job = apscheduler.reschedule_job(job_id=job_id, trigger='date',
                                          run_date=datetime.now() + timedelta(minutes=delay_time))
    remind_info = as_list(
        Bold("üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ª–æ–∂–µ–Ω–æ.\n"),
        as_key_value("‚è∞", Italic(datetime_to_str(job.next_run_time))),
        as_key_value("üìù", Italic(job.kwargs.get("text"))),
    ).as_html()

    await callback.answer()
    await callback.message.edit_text(remind_info)


# –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
@delay_remind_handlers.callback_query(F.data.startswith("done_remind"))
async def delay_remind(callback: CallbackQuery, apscheduler: AsyncIOScheduler):
    tmp = callback.data.split(":")
    job_id = tmp[1]

    job: Job = apscheduler.get_job(job_id)

    format_text = as_list(
        Bold("\t‚îÄ‚îÄ ‚ãÜ‚ãÖ‚òÜ‚ãÖ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÖ‚òÜ‚ãÖ‚ãÜ ‚îÄ‚îÄ"),
        f"‚úîÔ∏è üëâ{job.kwargs.get('text')}üëà",
        Bold("\t‚îÄ‚îÄ ‚ãÜ‚ãÖ‚òÜ‚ãÖ‚ãÜ ‚îÄ‚îÄ ‚ãÜ‚ãÖ‚òÜ‚ãÖ‚ãÜ ‚îÄ‚îÄ"),
    ).as_html()
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.message.answer(format_text)
    job.remove()


# –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
@delay_remind_handlers.callback_query(F.data.startswith("reschedule_remind"))
async def reschedule_remind(callback: CallbackQuery, state: FSMContext, apscheduler: AsyncIOScheduler):
    tmp = callback.data.split(":")
    job_id = tmp[1]
    job = apscheduler.get_job(job_id)
    await state.update_data(job_id=job_id, user_id=int(job.name), text=job.kwargs.get("text"))
    job.remove()
    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.answer()
    await callback.message.answer("–≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    await state.set_state(RescheduleReminds.get_remind)


@delay_remind_handlers.message(RescheduleReminds.get_remind, F.text | F.voice)
async def get_remind(message: Message, bot: Bot, state: FSMContext, apscheduler: AsyncIOScheduler):
    state_data = await state.get_data()
    remind = ''

    try:
    # –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–∞—Ä—Å–µ—Ä
        if message.text:
            remind = parse(message.text)
        # –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–∞—Ä—Å–µ—Ä
        elif message.voice:
            text = await conv_voice(message=message, bot=bot)
            remind = parse(text)

        # –µ—Å–ª–∏ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        if remind.get("messages").get("message"):
            await set_remind(message, remind, apscheduler, bot, state)
        # –µ—Å–ª–∏ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            text = state_data.get("text")
            remind["messages"]["message"] = text
            await set_remind(message, remind,  apscheduler, bot, state)

    except Exception as e:
        await message.answer('–≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è')


# —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
async def set_remind(message: Message,remind: dict, apscheduler: AsyncIOScheduler, bot: Bot, state: FSMContext):
    state_data = await state.get_data()
    user_id = state_data.get("user_id")
    await state.update_data(remind=remind)
    job = await save_data(state,bot,apscheduler, user_id)

    item = []
    if rd := remind.get("messages").get("period"):
        item.append(as_key_value("‚ôæ", Italic(rd)))
    remind_info = as_list(
        Bold("üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.\n"),
        as_key_value("‚è∞", Italic(datetime_to_str(job.next_run_time))),
        *item,
        as_key_value("üìù", Italic(remind.get("messages").get("message"))),

    ).as_html()

    await state.clear()

    # —Å–æ–∑–¥–∞—Ç—å id –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    hide_kb_id = str(time.time_ns())

    msg = await message.answer(remind_info, reply_markup=cancel_or_edit_kb(job.id, hide_kb_id))

    # —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
    date = datetime.now() + timedelta(seconds=15)
    apscheduler.add_job(edit_msg, "date", id=hide_kb_id, run_date=date, kwargs={"message": msg})


# —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def edit_msg(message: Message):
    await message.edit_reply_markup(reply_markup=None)


@delay_remind_handlers.message(RescheduleReminds.get_remind)
async def not_text_not_voice(message: Message):
    await message.answer("–≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
