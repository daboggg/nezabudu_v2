from datetime import datetime, timedelta

from aiogram import Router, Bot, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message
from aiogram.utils.formatting import as_list, Bold, as_key_value, Italic
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from sqlalchemy.ext.asyncio import AsyncSession

from bot.keyboards.main_ketboards import cancel_or_edit_kb
from bot.state_groups import Main
from bot.utils.converter import conv_voice
from bot.utils.from_datetime_to_str import datetime_to_str
from bot.utils.save_data import save_data
from parser_v2.parse import parse

main_handler = Router()


# –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
@main_handler.message(Main.get_message)
async def get_message(message: Message, bot: Bot, state: FSMContext, apscheduler: AsyncIOScheduler, session: AsyncSession):
    state_data = await state.get_data()
    state_data.get("remind").get("messages")["message"] = message.text
    await set_remind(message, bot, state, apscheduler,session, message.from_user.id)


# —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–¥, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–∫–µ–¥—É–ª–µ—Ä
async def set_remind(message: Message, bot: Bot, state: FSMContext, apscheduler: AsyncIOScheduler, session: AsyncSession, user_id: int):
    state_data = await state.get_data()
    remind = state_data.get("remind")

    # todo —É–±—Ä–∞—Ç—å –≤–Ω–∏–∑—É –ø—Ä–∏–Ω—Ç
    print(remind)

    job = await save_data(state=state, bot=bot, session=session, apscheduler=apscheduler, user_id=user_id)
    item = []
    if rd:= remind.get("messages").get("period"):
        item.append(as_key_value("‚ôæ", Italic(rd)))
    remind_info =as_list(
        Bold("üí° –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ.\n"),
        as_key_value("‚è∞", Italic(datetime_to_str(job.next_run_time))),
        *item,
        as_key_value("üìù", Italic(remind.get("messages").get("message"))),

    ).as_html()

    await state.clear()
    msg  = await message.answer(remind_info, reply_markup=cancel_or_edit_kb())

    # —É–¥–∞–ª–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —á–µ—Ä–µ–∑ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏
    date = datetime.now() + timedelta(seconds=15)
    apscheduler.add_job(edit_msg, "date", run_date=date, kwargs={"message": msg})

# —É–¥–∞–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
async def edit_msg(message: Message):
    await message.edit_reply_markup(reply_markup=None)


@main_handler.message(F.text | F.voice)
async def remind_me(message: Message, bot: Bot, state: FSMContext, apscheduler: AsyncIOScheduler, session: AsyncSession):
    try:
        remind = ''
        # –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Ç–µ–∫—Å—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–∞—Ä—Å–µ—Ä
        if message.text:
            remind = parse(message.text)
        # –µ—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ç–µ–∫—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø–∞—Ä—Å–µ—Ä
        elif message.voice:
            text = await conv_voice(message=message, bot=bot)
            remind = parse(text)

        # –µ—Å–ª–∏ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è
        if remind["messages"]["message"]:
            await state.update_data(remind=remind)
            await set_remind(message, bot, state, apscheduler, session, message.from_user.id)
        # –µ—Å–ª–∏ –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
        else:
            await state.update_data(remind=remind)
            await message.answer("–≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            await state.set_state(Main.get_message)
    except Exception as e:
        # todo —É–±—Ä–∞—Ç—å –≤–Ω–∏–∑—É –ø—Ä–∏–Ω—Ç
        print(e)
        await message.answer("–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∏ —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

